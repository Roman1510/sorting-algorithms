{"version":3,"sources":["components/Graph.jsx","randomizing/RandomizeArray.js","algorithms/Helper.js","algorithms/MergeSort.js","algorithms/QuickSort.js","components/App.jsx","algorithms/InsertionSort.js","index.js"],"names":["Graph","props","className","ref","forwardedRef","graphArray","map","e","i","style","height","width","randomizeArray","length","min","max","randArray","index","push","Math","floor","random","swap","arr","index1","index2","temp","getMergeSortAnimations","copy","len","animations","mergeSortHelper","Array","aux","left","right","mid","j","k","merge","getQuickSortAnimations","quickSortHelper","part","pivot","partition","SIZE","App","useState","setArr","isSorting","setIsSorting","containerRef","useRef","dt","Date","animateArrayAccess","arrayBarStyle","current","children","setTimeout","backgroundColor","DELAY","animateArrayUpdate","forEach","comparison","swapped","window","animationsTimerId","prevArr","newValue","newArr","arrayBars","animateSortedArray","handleClick","type","getInsertionSortAnimations","console","log","getTime","now","onClick","clearTimeout","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","track","onChange","_","val","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a97a4903.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Graph(props) {\n  return (\n    <div className=\"graph\" ref={props.forwardedRef} >\n      {props.graphArray.map((e, i) => {\n        return (\n          <div\n            key={i}\n            className=\"line\"\n            style={{ height: e, width: \"5px\" }}\n          ></div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Graph;\n","var randomIntFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nvar randomizeArray = (length, height) => {\n  var randArray = [];\n  for (let index = 0; index < length; index++) {\n    randArray.push(randomIntFromInterval(1, height));\n  }\n  return randArray;\n};\n\nexport default randomizeArray;\n","export function swap(arr, index1, index2) {\n  const temp = arr[index1];\n  arr[index1] = arr[index2];\n  arr[index2] = temp;\n}\n","export function getMergeSortAnimations(arr) {\n  const copy = [...arr];\n  const len = copy.length;\n  const aux = Array(len);\n  const animations = [];\n  mergeSortHelper(copy, aux, 0, len - 1, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(arr, aux, left, right, animations) {\n  if (right <= left) return;\n  const mid = left + Math.floor((right - left) / 2);\n  mergeSortHelper(arr, aux, left, mid, animations);\n  mergeSortHelper(arr, aux, mid + 1, right, animations);\n  merge(arr, aux, left, mid, right, animations);\n}\n\nfunction merge(arr, aux, left, mid, right, animations) {\n  for (let i = left; i <= right; i++) aux[i] = arr[i];\n  let i = left;\n  let j = mid + 1;\n  for (let k = left; k <= right; k++) {\n    if (i > mid) {\n      animations.push([[j], false]);\n      animations.push([[k, aux[j]], true]);\n      arr[k] = aux[j++];\n    } else if (j > right) {\n      animations.push([[i], false]);\n      animations.push([[k, aux[i]], true]);\n      arr[k] = aux[i++];\n    } else if (aux[j] < aux[i]) {\n      animations.push([[i, j], false]);\n      animations.push([[k, aux[j]], true]);\n      arr[k] = aux[j++];\n    } else {\n      animations.push([[i, j], false]);\n      animations.push([[k, aux[i]], true]);\n      arr[k] = aux[i++];\n    }\n  }\n}\n","import { swap } from './Helper';\n\nexport function getQuickSortAnimations(arr) {\n  const copy = [...arr];\n  const animations = [];\n  quickSortHelper(copy, 0, copy.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(arr, left, right, animations) {\n  if (right <= left) return;\n  const part = partition(arr, left, right, animations);\n  quickSortHelper(arr, left, part, animations);\n  quickSortHelper(arr, part + 1, right, animations);\n}\n\nfunction partition(arr, left, right, animations) {\n  let i = left;\n  let j = right + 1;\n  const pivot = arr[left];\n  while (true) {\n    while (arr[++i] <= pivot) {\n      if (i === right) break;\n      animations.push([[i], false]);\n    }\n    while (arr[--j] >= pivot) {\n      if (j === left) break;\n      animations.push([[j], false]);\n    }\n    if (j <= i) break;\n    animations.push([[i, arr[j]], true]);\n    animations.push([[j, arr[i]], true]);\n    swap(arr, i, j);\n  }\n  animations.push([[left, arr[j]], true]);\n  animations.push([[j, arr[left]], true]);\n  swap(arr, left, j);\n  return j;\n}\n","import React, { useState, useRef } from \"react\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Graph from \"./Graph\";\nimport randomizeArray from \"../randomizing/RandomizeArray.js\";\nimport { getInsertionSortAnimations } from \"../algorithms/InsertionSort\";\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\nimport { getQuickSortAnimations } from \"../algorithms/QuickSort\";\n\nlet SIZE = 20; //setting the initial size of the array\nconst DELAY = 5;\nconst ACCESSED_COLOUR = \"#ffc0cb\";\nconst SORTED_COLOUR = \"#00ffff\";\n\nfunction App() {\n  const [arr, setArr] = useState(randomizeArray(20, 550));\n  const [isSorting, setIsSorting] = useState(false);\n  const containerRef = useRef(null);\n  var dt = new Date(2021, 4, 19, 17, 32, 0);\n  console.log(Math.floor(dt.getTime() / 1000) - 1);\n  console.log(Math.floor(Date.now() / 1000));\n  function animateArrayAccess(index) {\n    const arrayBars = containerRef.current.children;\n    const arrayBarStyle = arrayBars[index].style;\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\n    }, DELAY);\n    setTimeout(() => {\n      arrayBarStyle.backgroundColor = \"red\";\n    }, DELAY * 2);\n  }\n  function animateSortedArray() {\n    const arrayBars = containerRef.current.children;\n    for (let i = 0; i < arrayBars.length; i++) {\n      const arrayBarStyle = arrayBars[i].style;\n      setTimeout(() => {\n        arrayBarStyle.backgroundColor = SORTED_COLOUR;\n      }, i * DELAY);\n    }\n    setTimeout(() => {\n      setIsSorting(false);\n    }, arrayBars.length * DELAY);\n  }\n  function animateArrayUpdate(animations) {\n    if (isSorting) return;\n    setIsSorting(true);\n    animations.forEach(([comparison, swapped], index) => {\n      (function () {\n        window.animationsTimerId = setTimeout(() => {\n          if (!swapped) {\n            if (comparison.length === 2) {\n              const [i, j] = comparison;\n              animateArrayAccess(i);\n              animateArrayAccess(j);\n            } else {\n              const [i] = comparison;\n              animateArrayAccess(i);\n            }\n          } else {\n            setArr((prevArr) => {\n              const [k, newValue] = comparison;\n              const newArr = [...prevArr];\n              newArr[k] = newValue;\n              return newArr;\n            });\n          }\n        }, index * DELAY);\n      })();\n    });\n    setTimeout(() => {\n      animateSortedArray();\n    }, animations.length * DELAY);\n  }\n  var RefreshButton = (a) => {\n    setArr(randomizeArray(a, 550));\n    clearTimeout(window.animationsTimerId);\n  };\n  function handleClick(type) {\n    let animations;\n    switch (type) {\n      case \"merge\":\n        animations = getMergeSortAnimations(arr);\n        animateArrayUpdate(animations);\n        break;\n      case \"insertion\":\n        animations = getInsertionSortAnimations(arr);\n        animateArrayUpdate(animations);\n        break;\n      case \"quick\":\n        animations = getQuickSortAnimations(arr);\n        animateArrayUpdate(animations);\n        break;\n      default:\n        console.log(\"default\");\n        break;\n    }\n  }\n  return (\n    <>\n      <div className=\"divslider\">\n        <button onClick={() => RefreshButton(SIZE)} className=\"btn btn-1\">\n          Refresh\n        </button>\n        <div className=\"adjust\">\n          <div style={{ width: \"200px\" }}>\n            <Slider\n              defaultValue={20}\n              aria-labelledby=\"discrete-slider\"\n              valueLabelDisplay=\"off\"\n              step={5}\n              marks\n              min={20}\n              max={100}\n              track={false}\n              onChange={(_, val) => {\n                SIZE = val;\n              }}\n            />\n          </div>\n          <input id=\"color-picker\" type=\"color\" />\n        </div>\n\n        <div>\n          <button\n            className=\"sorting-buttons\"\n            onClick={() => {\n              handleClick(\"merge\");\n            }}\n          >\n            Merge Sort\n          </button>\n          <button\n            className=\"sorting-buttons\"\n            onClick={() => {\n              handleClick(\"insertion\");\n            }}\n          >\n            Insertion Sort\n          </button>\n          <button\n            className=\"sorting-buttons\"\n            onClick={() => {\n              handleClick(\"quick\");\n            }}\n          >\n            Quick Sort\n          </button>\n        </div>\n      </div>\n      <Graph graphArray={arr} forwardedRef={containerRef} />\n    </>\n  );\n}\n\nexport default App;\n","import { swap } from \"./Helper\";\n\nexport function getInsertionSortAnimations(arr) {\n  const copy = [...arr];\n  const animations = [];\n  for (let i = 1; i < copy.length; i++) {\n    for (let j = i - 1; j >= 0; j--) {\n      animations.push([[j, j + 1], false]);\n      if (copy[j + 1] < copy[j]) {\n        animations.push([[j, copy[j + 1]], true]);\n        animations.push([[j + 1, copy[j]], true]);\n        swap(copy, j, j + 1);\n      } else break;\n    }\n  }\n  return animations;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}