{"version":3,"sources":["components/Graph.jsx","randomizing/RandomizeArray.js","algorithms/Helper.js","algorithms/MergeSort.js","algorithms/QuickSort.js","components/App.jsx","algorithms/InsertionSort.js","index.js"],"names":["Graph","props","className","ref","forwardedRef","graphArray","map","e","i","style","height","width","randomizeArray","length","min","max","randArray","index","push","Math","floor","random","swap","arr","index1","index2","temp","getMergeSortAnimations","copy","len","animations","mergeSortHelper","Array","aux","left","right","mid","j","k","merge","getQuickSortAnimations","quickSortHelper","part","pivot","partition","SIZE","App","useState","setArr","isSorting","setIsSorting","isSorted","setIsSorted","containerRef","useRef","animateArrayAccess","arrayBarStyle","current","children","setTimeout","backgroundColor","DELAY","animateArrayUpdate","forEach","comparison","swapped","window","animationsTimerId","prevArr","newValue","newArr","arrayBars","animateSortedArray","handleClick","type","getInsertionSortAnimations","console","log","useEffect","resetArrayColour","href","onClick","clearTimeout","Slider","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","track","onChange","_","val","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0094c292.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Graph(props) {\r\n  return (\r\n    <div className=\"graph\" ref={props.forwardedRef} >\r\n      {props.graphArray.map((e, i) => {\r\n        return (\r\n          <div\r\n            key={i}\r\n            className=\"line\"\r\n            style={{ height: e, width: \"5px\" }}\r\n          ></div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","var randomIntFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nvar randomizeArray = (length, height) => {\r\n  var randArray = [];\r\n  for (let index = 0; index < length; index++) {\r\n    randArray.push(randomIntFromInterval(1, height));\r\n  }\r\n  return randArray;\r\n};\r\n\r\nexport default randomizeArray;\r\n","export function swap(arr, index1, index2) {\r\n  const temp = arr[index1];\r\n  arr[index1] = arr[index2];\r\n  arr[index2] = temp;\r\n}\r\n","export function getMergeSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const len = copy.length;\r\n  const aux = Array(len);\r\n  const animations = [];\r\n  mergeSortHelper(copy, aux, 0, len - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction mergeSortHelper(arr, aux, left, right, animations) {\r\n  if (right <= left) return;\r\n  const mid = left + Math.floor((right - left) / 2);\r\n  mergeSortHelper(arr, aux, left, mid, animations);\r\n  mergeSortHelper(arr, aux, mid + 1, right, animations);\r\n  merge(arr, aux, left, mid, right, animations);\r\n}\r\n\r\nfunction merge(arr, aux, left, mid, right, animations) {\r\n  for (let i = left; i <= right; i++) aux[i] = arr[i];\r\n  let i = left;\r\n  let j = mid + 1;\r\n  for (let k = left; k <= right; k++) {\r\n    if (i > mid) {\r\n      animations.push([[j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n      arr[k] = aux[j++];\r\n    } else if (j > right) {\r\n      animations.push([[i], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n      arr[k] = aux[i++];\r\n    } else if (aux[j] < aux[i]) {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[j]], true]);\r\n      arr[k] = aux[j++];\r\n    } else {\r\n      animations.push([[i, j], false]);\r\n      animations.push([[k, aux[i]], true]);\r\n      arr[k] = aux[i++];\r\n    }\r\n  }\r\n}\r\n","import { swap } from './Helper';\r\n\r\nexport function getQuickSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  quickSortHelper(copy, 0, copy.length - 1, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSortHelper(arr, left, right, animations) {\r\n  if (right <= left) return;\r\n  const part = partition(arr, left, right, animations);\r\n  quickSortHelper(arr, left, part, animations);\r\n  quickSortHelper(arr, part + 1, right, animations);\r\n}\r\n\r\nfunction partition(arr, left, right, animations) {\r\n  let i = left;\r\n  let j = right + 1;\r\n  const pivot = arr[left];\r\n  while (true) {\r\n    while (arr[++i] <= pivot) {\r\n      if (i === right) break;\r\n      animations.push([[i], false]);\r\n    }\r\n    while (arr[--j] >= pivot) {\r\n      if (j === left) break;\r\n      animations.push([[j], false]);\r\n    }\r\n    if (j <= i) break;\r\n    animations.push([[i, arr[j]], true]);\r\n    animations.push([[j, arr[i]], true]);\r\n    swap(arr, i, j);\r\n  }\r\n  animations.push([[left, arr[j]], true]);\r\n  animations.push([[j, arr[left]], true]);\r\n  swap(arr, left, j);\r\n  return j;\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Graph from \"./Graph\";\r\nimport randomizeArray from \"../randomizing/RandomizeArray.js\";\r\nimport { getInsertionSortAnimations } from \"../algorithms/InsertionSort\";\r\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\r\nimport { getQuickSortAnimations } from \"../algorithms/QuickSort\";\r\n\r\nlet SIZE = 20; //setting the initial size of the array\r\nconst DELAY = 5;\r\nconst ACCESSED_COLOUR = \"#ffc0cb\";\r\nconst SORTED_COLOUR = \"#00ffff\";\r\n\r\nfunction App() {\r\n  const [arr, setArr] = useState(randomizeArray(20, 550));\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const containerRef = useRef(null);\r\n  useEffect(initialiseArray, []);\r\n  function resetArrayColour() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }\r\n  }\r\n  function initialiseArray() {\r\n    if (isSorting) return;\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    setArr(randomizeArray(20, 550));\r\n  }\r\n  function animateArrayAccess(index) {\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"red\";\r\n    }, DELAY * 2);\r\n  }\r\n  function animateSortedArray() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = SORTED_COLOUR;\r\n      }, i * DELAY);\r\n    }\r\n    setTimeout(() => {\r\n      setIsSorted(true);\r\n      setIsSorting(false);\r\n    }, arrayBars.length * DELAY);\r\n  }\r\n  function animateArrayUpdate(animations) {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    animations.forEach(([comparison, swapped], index) => {\r\n      (function () {\r\n        window.animationsTimerId = setTimeout(() => {\r\n          if (!swapped) {\r\n            if (comparison.length === 2) {\r\n              const [i, j] = comparison;\r\n              animateArrayAccess(i);\r\n              animateArrayAccess(j);\r\n            } else {\r\n              const [i] = comparison;\r\n              animateArrayAccess(i);\r\n            }\r\n          } else {\r\n            setArr((prevArr) => {\r\n              const [k, newValue] = comparison;\r\n              const newArr = [...prevArr];\r\n              newArr[k] = newValue;\r\n              return newArr;\r\n            });\r\n          }\r\n        }, index * DELAY);\r\n      })();\r\n    });\r\n    setTimeout(() => {\r\n      animateSortedArray();\r\n    }, animations.length * DELAY);\r\n  }\r\n  var RefreshButton = (a) => {\r\n    setArr(randomizeArray(a, 550));\r\n    setIsSorted(true);\r\n    clearTimeout(window.animationsTimerId);\r\n  };\r\n  function handleClick(type) {\r\n    let animations;\r\n    switch (type) {\r\n      case \"merge\":\r\n        animations = getMergeSortAnimations(arr);\r\n        animateArrayUpdate(animations);\r\n        break;\r\n      case \"insertion\":\r\n        animations = getInsertionSortAnimations(arr);\r\n        animateArrayUpdate(animations);\r\n        break;\r\n      case \"quick\":\r\n        animations = getQuickSortAnimations(arr);\r\n        animateArrayUpdate(animations);\r\n        break;\r\n      default:\r\n        console.log(\"default\");\r\n        break;\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"divslider\">\r\n        <a href=\"/#\" onClick={() => RefreshButton(SIZE)}  className=\"btn btn-1\">\r\n          Refresh\r\n        </a>\r\n        <div className=\"adjust\">\r\n          <div style={{ width: \"200px\" }}>\r\n            <Slider\r\n              defaultValue={20}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"off\"\r\n              step={5}\r\n              marks\r\n              min={20}\r\n              max={100}\r\n              track={false}\r\n              onChange={(_, val) => {\r\n                SIZE = val;\r\n              }}\r\n            />\r\n          </div>\r\n          <input id=\"color-picker\" type=\"color\" />\r\n        </div>\r\n\r\n        <div className=\"sorting-buttons\">\r\n          <button\r\n            onClick={() => {\r\n              handleClick(\"merge\");\r\n            }}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handleClick(\"insertion\");\r\n            }}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handleClick(\"quick\");\r\n            }}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Graph graphArray={arr} forwardedRef={containerRef} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { swap } from \"./Helper\";\r\n\r\nexport function getInsertionSortAnimations(arr) {\r\n  const copy = [...arr];\r\n  const animations = [];\r\n  for (let i = 1; i < copy.length; i++) {\r\n    for (let j = i - 1; j >= 0; j--) {\r\n      animations.push([[j, j + 1], false]);\r\n      if (copy[j + 1] < copy[j]) {\r\n        animations.push([[j, copy[j + 1]], true]);\r\n        animations.push([[j + 1, copy[j]], true]);\r\n        swap(copy, j, j + 1);\r\n      } else break;\r\n    }\r\n  }\r\n  return animations;\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}