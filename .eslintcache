[{"D:\\Sandbox\\sorting-algorithms\\src\\index.js":"1","D:\\Sandbox\\sorting-algorithms\\src\\components\\App.jsx":"2","D:\\Sandbox\\sorting-algorithms\\src\\components\\Graph.jsx":"3","D:\\Sandbox\\sorting-algorithms\\src\\randomizing\\RandomizeArray.js":"4","D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\Helper.js":"5","D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\InsertionSort.js":"6","D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\QuickSort.js":"7","D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\MergeSort.js":"8"},{"size":243,"mtime":1617620593390,"results":"9","hashOfConfig":"10"},{"size":4955,"mtime":1618761418658,"results":"11","hashOfConfig":"10"},{"size":385,"mtime":1618758386056,"results":"12","hashOfConfig":"10"},{"size":348,"mtime":1618693249806,"results":"13","hashOfConfig":"10"},{"size":130,"mtime":1618687888417,"results":"14","hashOfConfig":"10"},{"size":496,"mtime":1618687894900,"results":"15","hashOfConfig":"10"},{"size":1091,"mtime":1618687914350,"results":"16","hashOfConfig":"10"},{"size":1296,"mtime":1618087737748,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1cb4pop",{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Sandbox\\sorting-algorithms\\src\\index.js",[],["36","37"],"D:\\Sandbox\\sorting-algorithms\\src\\components\\App.jsx",["38"],"import React, { useState, useRef, useEffect } from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Graph from \"./Graph\";\r\nimport randomizeArray from \"../randomizing/RandomizeArray.js\";\r\nimport { getInsertionSortAnimations } from \"../algorithms/InsertionSort\";\r\nimport { getMergeSortAnimations } from \"../algorithms/MergeSort\";\r\nimport { getQuickSortAnimations } from \"../algorithms/QuickSort\";\r\n\r\nlet SIZE = 20; //setting the initial size of the array\r\nconst DELAY = 5;\r\nconst ACCESSED_COLOUR = \"#ffc0cb\";\r\nconst SORTED_COLOUR = \"#00ffff\";\r\n\r\nfunction App() {\r\n  const [arr, setArr] = useState(randomizeArray(20, 550));\r\n  const [isSorting, setIsSorting] = useState(false);\r\n  const [isSorted, setIsSorted] = useState(false);\r\n  const containerRef = useRef(null);\r\n  useEffect(initialiseArray, []);\r\n  function resetArrayColour() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arr.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      arrayBarStyle.backgroundColor = \"\";\r\n    }\r\n  }\r\n  function initialiseArray() {\r\n    if (isSorting) return;\r\n    if (isSorted) resetArrayColour();\r\n    setIsSorted(false);\r\n    setArr(randomizeArray(20, 550));\r\n  }\r\n  function animateArrayAccess(index) {\r\n    const arrayBars = containerRef.current.children;\r\n    const arrayBarStyle = arrayBars[index].style;\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = ACCESSED_COLOUR;\r\n    }, DELAY);\r\n    setTimeout(() => {\r\n      arrayBarStyle.backgroundColor = \"red\";\r\n    }, DELAY * 2);\r\n  }\r\n  function animateSortedArray() {\r\n    const arrayBars = containerRef.current.children;\r\n    for (let i = 0; i < arrayBars.length; i++) {\r\n      const arrayBarStyle = arrayBars[i].style;\r\n      setTimeout(() => {\r\n        arrayBarStyle.backgroundColor = SORTED_COLOUR;\r\n      }, i * DELAY);\r\n    }\r\n    setTimeout(() => {\r\n      setIsSorted(true);\r\n      setIsSorting(false);\r\n    }, arrayBars.length * DELAY);\r\n  }\r\n  function animateArrayUpdate(animations) {\r\n    if (isSorting) return;\r\n    setIsSorting(true);\r\n    animations.forEach(([comparison, swapped], index) => {\r\n      (function () {\r\n        window.animationsTimerId = setTimeout(() => {\r\n          if (!swapped) {\r\n            if (comparison.length === 2) {\r\n              const [i, j] = comparison;\r\n              animateArrayAccess(i);\r\n              animateArrayAccess(j);\r\n            } else {\r\n              const [i] = comparison;\r\n              animateArrayAccess(i);\r\n            }\r\n          } else {\r\n            setArr((prevArr) => {\r\n              const [k, newValue] = comparison;\r\n              const newArr = [...prevArr];\r\n              newArr[k] = newValue;\r\n              return newArr;\r\n            });\r\n          }\r\n        }, index * DELAY);\r\n      })();\r\n    });\r\n    setTimeout(() => {\r\n      animateSortedArray();\r\n    }, animations.length * DELAY);\r\n  }\r\n  var RefreshButton = (a) => {\r\n    setArr(randomizeArray(a, 550));\r\n    setIsSorted(true);\r\n    clearTimeout(window.animationsTimerId);\r\n  };\r\n  function handleClick(type) {\r\n    let animations;\r\n    switch (type) {\r\n      case \"merge\":\r\n        animations = getMergeSortAnimations(arr);\r\n        animateArrayUpdate(animations);\r\n        break;\r\n      case \"insertion\":\r\n        animations = getInsertionSortAnimations(arr);\r\n        animateArrayUpdate(animations);\r\n        break;\r\n      case \"quick\":\r\n        animations = getQuickSortAnimations(arr);\r\n        animateArrayUpdate(animations);\r\n        break;\r\n      default:\r\n        console.log(\"default\");\r\n        break;\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"divslider\">\r\n        <a onClick={() => RefreshButton(SIZE)} href=\"/#\" className=\"btn btn-1\">\r\n          Refresh\r\n        </a>\r\n        <div className=\"adjust\">\r\n          <div style={{ width: \"200px\" }}>\r\n            <Slider\r\n              defaultValue={20}\r\n              aria-labelledby=\"discrete-slider\"\r\n              valueLabelDisplay=\"off\"\r\n              step={5}\r\n              marks\r\n              min={20}\r\n              max={100}\r\n              track={false}\r\n              onChange={(_, val) => {\r\n                SIZE = val;\r\n              }}\r\n            />\r\n          </div>\r\n          <input id=\"color-picker\" type=\"color\" />\r\n        </div>\r\n\r\n        <div className=\"sorting-buttons\">\r\n          <button\r\n            onClick={() => {\r\n              handleClick(\"merge\");\r\n            }}\r\n          >\r\n            Merge Sort\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handleClick(\"insertion\");\r\n            }}\r\n          >\r\n            Insertion Sort\r\n          </button>\r\n          <button\r\n            onClick={() => {\r\n              handleClick(\"quick\");\r\n            }}\r\n          >\r\n            Quick Sort\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <Graph graphArray={arr} forwardedRef={containerRef} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\Sandbox\\sorting-algorithms\\src\\components\\Graph.jsx",[],"D:\\Sandbox\\sorting-algorithms\\src\\randomizing\\RandomizeArray.js",[],"D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\Helper.js",[],"D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\InsertionSort.js",[],"D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\QuickSort.js",[],"D:\\Sandbox\\sorting-algorithms\\src\\algorithms\\MergeSort.js",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":19,"column":30,"nodeType":"45","endLine":19,"endColumn":32,"suggestions":"46"},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isSorted', 'isSorting', and 'resetArrayColour'. Either include them or remove the dependency array.","ArrayExpression",["49"],"no-global-assign","no-unsafe-negation",{"desc":"50","fix":"51"},"Update the dependencies array to be: [isSorted, isSorting, resetArrayColour]",{"range":"52","text":"53"},[811,813],"[isSorted, isSorting, resetArrayColour]"]